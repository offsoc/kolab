transforms:
  apps:
    type: route
    inputs:
      - input
    reroute_unmatched: true
    route:
      roundcube: contains!(.pod_name, "roundcube")
      proxy: contains!(.pod_name, "proxy")
      kolab: contains!(.pod_name, "kolab")
      postfix: contains!(.pod_name, "postfix")
      imap: contains!(.pod_name, "imap")
  parse_kolab:
    type: remap
    inputs:
      - apps.kolab
    source: |
      structured = parse_logfmt(.log) ?? {}
      . = merge(., structured)
      .timestamp = parse_timestamp(.timestamp, "%Y/%m/%d %H:%M:%S %z") ?? now()
  parse_roundcube:
    type: remap
    inputs:
      - apps.roundcube
    source: |
      structured = parse_apache_log(.log, format: "common") ?? parse_logfmt(.log) ?? {}
      . = merge(., structured)
      .timestamp = parse_timestamp(.timestamp, "%Y/%m/%d %H:%M:%S %z") ?? now()
  parse_imap:
    type: remap
    inputs:
      - apps.imap
    source: |
      # Drop noisy saslauthd debug messages
      if contains(string!(.log), "accept lock") {
        abort
      }
      structured = parse_regex(.log, pattern: r'^(?<time>[^ ]+ [0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]) (?<host>[^ ]+) (?<facility>[^ ]+) (?<program>.*)\[(?<pid>[0-9]+)\]( )?: *(?<log>.*)$') ?? {}
      . = merge(., structured)
      .timestamp = parse_timestamp(.timestamp, "%Y/%m/%d %H:%M:%S %z") ?? now()
  parse_proxy:
    type: remap
    inputs:
      - apps.proxy
    source: |
      structured = parse_regex(.log, pattern: r'^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")') ?? {}
      . = merge(., structured)
      .timestamp = parse_timestamp(.timestamp, "%Y/%m/%d %H:%M:%S %z") ?? now()
  parse_postfix:
    type: remap
    inputs:
      - apps.postfix
    source: |
      if .container_name == "metricsexporter" {
        abort
      }
      # Drop noisy saslauthd debug messages
      if contains(string!(.log), "accept lock") {
        abort
      }
      structured = parse_regex(.log, pattern: r'^(?<time>[^ ]+ [0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]) (?<host>[^ ]+) (?<process>[^:]+): (?<log>((?<key>[^ :]+)[ :])? ?((to|from)=<(?<address>[^>]+)>)?.*)$') ?? {}
      . = merge(., structured)
      .timestamp = parse_timestamp(.timestamp, "%Y/%m/%d %H:%M:%S %z") ?? now()
  parse_unmatched:
    type: remap
    inputs:
      - apps._unmatched
    source: |
      .timestamp = parse_timestamp(.timestamp, "%Y/%m/%d %H:%M:%S %z") ?? now()
