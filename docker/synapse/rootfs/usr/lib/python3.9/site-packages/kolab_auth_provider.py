from typing import Awaitable, Callable, Optional, Tuple

import logging
import synapse
from synapse import module_api

logger = logging.getLogger(__name__)


class KolabAuthProvider:
    def __init__(self, config: dict, api: module_api):
        self.api = api

        self.kolab_url = config['kolab_url']

        api.register_password_auth_provider_callbacks(
            check_3pid_auth=self.check_3pid_auth,
            auth_checkers={
                ("m.login.password", ("password",)): self.check_pass,
            },
        )

    async def check_kolab_login(self, username, password):
        # Raises an exception on non-200 status
        response = await self.api.http_client.post_json_get_json(
            self.kolab_url + "/api/auth/login", {"email": username, "password": password}
        )
        logger.info("RESPONSE")
        logger.info(response)

        return True

    def email_to_username(self, email):
        # We simply use the entire email address as username
        if "=" in email:
            raise Exception("Can't deal with = in email.")
        return email.replace("@", "=")

    def username_to_email(self, username):
        return username.replace("=", "@")

    # This is used when logging in via email address
    async def check_3pid_auth(
        self,
        medium: str,
        address: str,
        password: str,
    ) -> Optional[
        Tuple[
            str,
            Optional[Callable[["synapse.module_api.LoginResponse"], Awaitable[None]]]
        ]
    ]:
        logger.info("Got email password check for " + address)

        if not await self.check_kolab_login(address, password):
            logger.info("Password mismatch " + address)
            return None

        logger.info("password check success for " + address)
        username = self.email_to_username(address)
        userid = self.api.get_qualified_user_id(username)
        if not await self.api.check_user_exists(userid):
            logger.info("Account not found so registering " + address)
            # TODO set admin flag based on if user is admin
            # Maybe copy over some other details?
            userid = await self.api.register_user(username, address, [address])

        logger.info("auth complete " + userid)
        return userid, None

    # This will be used to check the password on existing users
    async def check_pass(
        self,
        username: str,
        login_type: str,
        login_dict: "synapse.module_api.JsonDict",
    ) -> Optional[
        Tuple[
            str,
            Optional[Callable[["synapse.module_api.LoginResponse"], Awaitable[None]]],
        ]
    ]:
        logger.info("Got password check for " + username)
        if login_type != "m.login.password":
            logger.info("wrong type" + login_type)
            return None

        localpart = username.split(":", 1)[0][1:]
        logger.info("localpart %s authenticated", localpart)

        email = self.username_to_email(localpart)
        if not await self.check_kolab_login(email, login_dict.get("password")):
            logger.info("Password mismatch " + email)
            return None

        return self.api.get_qualified_user_id(username), None
