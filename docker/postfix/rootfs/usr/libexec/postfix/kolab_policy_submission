#!/usr/bin/python3
"""
This policy applies submission policies

To manually test this you can issue something like this (see https://www.postfix.org/SMTPD_POLICY_README.html from more info on the protocol):
echo -e "request=smtpd_access_policy\nsender=test1@kolab.org\nrecipient=test2@kolab.org\ninstance=testinstance\nprotocol_state=DATA\n\n" | /usr/libexec/postfix/kolab_policy_submission

"""

import time
import sys
import json
import logging
import requests


class PolicyRequest:
    """
        A holder of policy request instances.
    """
    recipients = []
    sender = None
    user = None

    def __init__(self, request):
        """
            Initialize a policy request, usually in RCPT protocol state.
        """
        logging.debug("Initializing request.")
        if 'sender' in request:
            self.sender = request['sender']

        if 'recipient' in request:
            request['recipient'] = request['recipient']

            self.recipients.append(request['recipient'])

        if 'sasl_sender' in request and request['sasl_sender']:
            self.user = request['sasl_sender']
        elif 'sasl_username' in request and request['sasl_username']:
            self.user = request['sasl_username']

        logging.debug(f"  {self.sender}")
        logging.debug(f"  {self.recipients}")

    def add_request(self, request):
        """
            Add an additional request from an instance to the existing instance
        """
        # Normalize email addresses (they may contain recipient delimiters)
        if 'recipient' in request:
            request['recipient'] = request['recipient']

            if not request['recipient'].strip() == '':
                self.recipients.append(request['recipient'])
            logging.debug(f"  {self.recipients}")

    def check_policy(self):
        """
            Pass the request to Kolab API
        """
        try:
            logging.debug(f"  Checking policy for {self.sender}")
            response = requests.post(
                URL,
                data={
                    'sender': self.sender,
                    'recipients': self.recipients,
                    'user': self.user
                },
                # Skip certificate verification for this internal request
                verify=False
            )

        # pylint: disable=broad-except
        except Exception:
            print("action=DEFER_IF_PERMIT Temporary error, try again later.\n")
            sys.stdout.flush()
            sys.exit(0)

        return response


def read_request_input():
    """
        Read a single policy request from sys.stdin, and return a dictionary
        containing the request.
    """
    start_time = time.time()

    policy_request = {}
    end_of_request = False

    while not end_of_request:
        if (time.time() - start_time) >= 10:
            print("action=DEFER_IF_PERMIT Temporary error, try again later.\n")
            sys.stdout.flush()
            sys.exit(0)

        request_line = sys.stdin.readline()

        # The empty line terminates the request
        if request_line.strip() == '':
            if 'request' in policy_request:
                end_of_request = True
        else:
            request_line = request_line.strip()
            request_key = request_line.split('=')[0]
            request_value = '='.join(request_line.split('=')[1:])

            policy_request[request_key] = request_value

    return policy_request


if __name__ == "__main__":
    URL = 'SERVICES_HOST/api/webhooks/policy/submission'

    policy_requests = {}

    logging.root.handlers = []
    # Set to logging.DEBUG to enable logging
    logging.basicConfig(level=logging.ERROR,
                        format='%(asctime)s %(levelname)s %(message)s',
                        filename='/var/log/kolab/postfix-policy-submission.log',
                        filemode='a')

    # Start the work
    while True:
        input = read_request_input()
        logging.debug(input)

        instance = input['instance']

        if instance in policy_requests:
            policy_requests[instance].add_request(input)
        else:
            policy_requests[instance] = PolicyRequest(input)

        protocol_state = input['protocol_state'].strip().lower()

        # Only proceed with the request once we have collected sender and recipient information
        if protocol_state != 'data' or not policy_requests[instance].sender or not policy_requests[instance].user:
            print("action=DUNNO\n")
            logging.debug("DUNNO before state data.")
            sys.stdout.flush()
            sys.exit(0)

        response = policy_requests[instance].check_policy()
        logging.debug(response)

        try:
            R = json.loads(response.text)
            logging.debug(R)
        # pylint: disable=broad-except
        except Exception:
            logging.warning("Failed to load json response.")
            print("action=DEFER_IF_PERMIT Temporary error, try again later.\n")
            sys.stdout.flush()
            sys.exit(0)

        if 'prepend' in R:
            for prepend in R['prepend']:
                print("action=PREPEND {0}".format(prepend))

        if 'reason' in R:
            logging.info("action={0} {1}\n".format(R['response'], R['reason']))
            print("action={0} {1}\n".format(R['response'], R['reason']))
        else:
            logging.info("action={0}\n".format(R['response']))
            print("action={0}\n".format(R['response']))

        sys.stdout.flush()
        sys.exit(0)
