version: '3'
services:
  coturn:
    build:
      context: ./docker/coturn/
    container_name: kolab-coturn
    environment:
      - TURN_PUBLIC_IP=${COTURN_PUBLIC_IP}
      - TURN_LISTEN_PORT=3478
      - TURN_STATIC_SECRET==${COTURN_STATIC_SECRET}
    hostname: sturn.mgmt.com
    image: kolab-coturn
    network_mode: host
    restart: on-failure
    tty: true
  kolab:
    build:
      context: ./docker/kolab/
    container_name: kolab
    depends_on:
      - mariadb
    extra_hosts:
      - "kolab.mgmt.com:127.0.0.1"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_ROOT_PASSWORD=Welcome2KolabSystems
    healthcheck:
      interval: 10s
      test: test -f /tmp/kolab-init.done
      timeout: 5s
      retries: 30
    hostname: kolab.mgmt.com
    image: kolab
    network_mode: host
    tmpfs:
      - /run
      - /tmp
      - /var/run
      - /var/tmp
    tty: true
    volumes:
      - /etc/letsencrypt/:/etc/letsencrypt/:ro
      - ./docker/certs/ca.cert:/etc/pki/tls/certs/ca.cert:ro
      - ./docker/certs/ca.cert:/etc/pki/ca-trust/source/anchors/ca.cert:ro
      - ./docker/certs/kolab.hosted.com.cert:/etc/pki/tls/certs/kolab.hosted.com.cert
      - ./docker/certs/kolab.hosted.com.key:/etc/pki/tls/certs/kolab.hosted.com.key
      - ./docker/certs/kolab.mgmt.com.cert:/etc/pki/tls/certs/kolab.mgmt.com.cert
      - ./docker/certs/kolab.mgmt.com.key:/etc/pki/tls/certs/kolab.mgmt.com.key
      - ./docker/kolab/utils:/root/utils:ro
      - ./src/.env:/.dockerenv:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
  mariadb:
    container_name: kolab-mariadb
    environment:
      MYSQL_ROOT_PASSWORD: Welcome2KolabSystems
      TZ: "+02:00"
    healthcheck:
      interval: 10s
      test: test -e /var/run/mysqld/mysqld.sock
      timeout: 5s
      retries: 30
    image: mariadb
    network_mode: host
  nginx:
    build:
      context: ./docker/nginx/
      args:
        APP_WEBSITE_DOMAIN: ${APP_WEBSITE_DOMAIN:?err}
    container_name: kolab-nginx
    hostname: nginx.hosted.com
    image: kolab-nginx
    network_mode: host
    tmpfs:
      - /run
      - /tmp
      - /var/run
      - /var/tmp
    tty: true
    volumes:
      - ./docker/certs/imap.hosted.com.cert:/etc/pki/tls/certs/imap.hosted.com.cert
      - ./docker/certs/imap.hosted.com.key:/etc/pki/tls/private/imap.hosted.com.key
  pdns-sql:
    build:
      context: ./docker/pdns-sql/
    container_name: kolab-pdns-sql
    depends_on:
      - mariadb
    hostname: pdns-sql
    image: apheleia/kolab-pdns-sql
    network_mode: host
    tmpfs:
      - /run
      - /tmp
      - /var/run
      - /var/tmp
    tty: true
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
  proxy:
    build:
      context: ./docker/proxy/
    container_name: kolab-proxy
    hostname: kanarip.internet-box.ch
    image: kolab-proxy
    network_mode: host
    tmpfs:
      - /run
      - /tmp
      - /var/run
      - /var/tmp
    tty: true
    volumes:
      - ./docker/certs/:/etc/certs/:ro
      - /etc/letsencrypt/:/etc/letsencrypt/:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
  redis:
    build:
      context: ./docker/redis/
    container_name: kolab-redis
    hostname: redis
    image: redis
    network_mode: host
    volumes:
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
  swoole:
    build:
      context: ./docker/swoole/
    container_name: kolab-swoole
    image: apheleia/swoole:4.6.x
  worker:
    build:
      context: ./docker/worker/
    container_name: kolab-worker
    depends_on:
      - kolab
    hostname: worker
    image: kolab-worker
    network_mode: host
    tmpfs:
      - /run
      - /tmp
      - /var/run
      - /var/tmp
    tty: true
    volumes:
      - ./src:/home/worker/src.orig:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
  meet:
    build:
      context: ./docker/meet/
    environment:
      - REDIS_IP=${MEET_REDIS_IP}
      - REDIS_PORT=${MEET_REDIS_PORT}
      - REDIS_DBNAME=${MEET_REDIS_DATABASE}
      - REDIS_PASSWORD=${MEET_REDIS_PASSWORD}
      - PUBLIC_IP=${MEET_PUBLIC_IP}
      - PUBLIC_DOMAIN=${MEET_PUBLIC_DOMAIN}
      - TURN_SERVER=${MEET_TURN_SERVER}
      - TURN_STATIC_SECRET==${COTURN_STATIC_SECRET}
    network_mode: host
    container_name: kolab-meet
    image: kolab-meet
    volumes:
      - /etc/letsencrypt/:/etc/letsencrypt/:ro
      - ./meet/server:/src/meet/:ro
      - ./docker/meet/build/node_modules:/root/node_modules
      - ./docker/certs/kolab.hosted.com.cert:/etc/pki/tls/certs/kolab.hosted.com.cert
      - ./docker/certs/kolab.hosted.com.key:/etc/pki/tls/certs/kolab.hosted.com.key
